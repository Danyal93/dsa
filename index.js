//@ts-check
const countSubsetWithSumK = require("./dp/17_countSubsetsWithSumK");
const lenOfLongestSubarrWithSumK = require("./array/easy/11_longestSubArrayWithSumK");
const removeDuplicates = require("./array/easy/5_removeDuplicatesfromSortedArray");
const moveZeroes = require("./array/easy/7_moveZeroes");
const largestSubarrayWithZeroSum = require("./array/hard/3_largestSubarrayWithZeroum");
const mergeIntervals = require("./array/hard/4_mergeOverlappingSubintervals");
const getInversionCount = require("./array/hard/5_countInversions");
const countSmaller = require("./array/hard/6_countOfSmallerNumbersAfterSelf");
const reversePairs = require("./array/hard/7_reversePair");
const twoSum = require("./array/medium/1_twoSum");
const rearrangeArray = require("./array/medium/6_rearrangeArrayElementsBySign");
const shipWithinDays = require("./binarySearch/capacityToShipPackagesWithinDays");
const findKthPositive = require("./binarySearch/findKthMissingPositiveNumber");
const findMin = require("./binarySearch/findMinimumInRotatedSortedArray");
const findPeakElement = require("./binarySearch/findPeakElement");
const minEatingSpeed = require("./binarySearch/kokoEatingBananas");
const maxDistance = require("./binarySearch/magneticForceBetweenTwoBalls");
const minDaysToMakeBouquet = require("./binarySearch/minimumDaysToMakeBouquets");
const nthRoot = require("./binarySearch/nthRoot");
const singleNonDuplicate = require("./binarySearch/singleElementInSortedArray");
const splitArray = require("./binarySearch/sliptArrayLargestSum");
const floorSqrt = require("./binarySearch/squareRootOfNumber");
const minPathSum = require("./dp/10_minimumPathSum");
const minimumTotal = require("./dp/11_minimumPathSumInTriangularGrid");
const minFallingPathSum = require("./dp/12_minimumFallingPathSum");
const subsetSumProblem = require("./dp/14_subsetSumProblem");
const canPartition = require("./dp/15_partitionEqualSubsetSum");
const coinChange = require("./dp/20_coinChange1");
const findTargetSumWays = require("./dp/21_findTargetSumWays");
const unboundedKnapSack = require("./dp/22_unboundedKnapsack");
const longestCommonSubsequence = require("./dp/24_longestCommonSubsequence");
const longestCommonSubstring = require("./dp/27_Longest Common Substring");

const climbStairs = require("./dp/2_climbingStairs");
const wildCardMatching = require("./dp/34_wildCardMatching");
const bestTimeToBuyAndSellStock2 = require("./dp/36_bestTimeToBuyAndSellStock2");
const bestTimeToBuyAndSellStock3 = require("./dp/37_bestTimeToBuyAndSellStock3");
const minimumEnergy = require("./dp/3_frogJump");
const lengthOfLIS = require("./dp/41_longestIncreasingSubsequence");
const printLongestIncreasingSubsequence = require("./dp/42_printingLongestIncreasingSubsequence");
const largestDivisibleSubset = require("./dp/44_largestDivisibleSubset");
const longestStrChain = require("./dp/45_longestStringChain");
const longestBitonicSequence = require("./dp/46_longestBitonicSequence");
const minimizeCost = require("./dp/4_frogJumpWithKdistance");
const minimumCostToCutTheStick = require("./dp/50_minimumCostToCutTheStick");
const rob = require("./dp/5_maximumSumOfNonAdjacentElements");
const rob2 = require("./dp/6_houseRobber2");
const ninjaTraining = require("./dp/7_ninjaTraining");
const uniquePaths = require("./dp/8_uniquePaths");
const uniquePathsWithObstacles = require("./dp/9_uniquePaths2");
const findMaxForm = require("./dp/new/1_onesAndZeroes");
const twoKeysKeyboard = require("./dp/new/2_twoKeysKeyboard");
const mincostTickets = require("./dp/new/3_mincostTickets");
const topKFrequent = require("./heap/17_topKFrequentElements");
const findMedianOfStream = require("./heap/findMedianFromDataStream");
const isNStraightHand = require("./heap/handofStraights");
const maxSlidingWindow = require("./stack/10_slidingWindowMaximum");
const StockSpannerTest = require("./stack/11_onlineStockSpan");
const nextGreaterElement = require("./stack/1_nextGreaterElement1");
const nextGreaterElements = require("./stack/2_nextGreaterElement2");
const trap = require("./stack/3_trappingRainwater");
const sumSubarrayMins = require("./stack/4_sumOfSubarrayMinimums");
const asteroidCollision = require("./stack/5_asteroidCollision");
const subArrayRanges = require("./stack/6_sumOfSubarrayRanges");
const removeKdigits = require("./stack/7_removeKDigits");
const largestRectangleArea = require("./stack/8_largestRectangleInHistogram");
const maximalRectangle = require("./stack/9_maximalRectangle");
const lengthOfLongestSubstring = require("./twoPointer/medium/1_longestSubstringWithoutRepeatingCharacters");
const longestOnes = require("./twoPointer/medium/2_maxConsecutiveOnes3");
const totalFruits = require("./twoPointer/medium/3_fruitIntoBaskets");
const characterReplacement = require("./twoPointer/medium/4_longestRepeatingCharacterReplacement");
const numSubarraysWithSum = require("./twoPointer/medium/5_binarySubarraysWithSum");
const numberOfNiceSubarrays = require("./twoPointer/medium/6_countNumberOfNiceSubarrays");
const numberOfSubstringsContainingAllThreeCharacters = require("./twoPointer/medium/7_numberOfSubstringsContainingAllThreeCharacters");
const subarraysWithKDistinct = require("./twoPointer/hard/1_subarraysWithKDifferentIntegers");
const minimumWindowSubstring = require("./twoPointer/hard/2_minimumWindowSubstring");
const longestSubstringWithKUniques = require("./twoPointer/hard/3_longestSubstringWithKUniques");
const bfsTraversal = require("./graph/learning/bfsOfGraph");
const dfsTraversal = require("./graph/learning/dfsOfGraph");
const numberOfProvinces = require("./graph/traversingProblem/1_numberOfProvinces");
const orangesRotting = require("./graph/traversingProblem/3_rottingOranges");
const floodFill = require("./graph/traversingProblem/4_floodFill");
const cycleDetectionInUnirectedGraphBSF = require("./graph/traversingProblem/5_cycleDetectionInUnirectedGraphBSF");
const cycleDetectionInUnirectedGraphDSF = require("./graph/traversingProblem/6_cycleDetectionInUnirectedGraphDSF");
const O1Matrix = require("./graph/traversingProblem/7_01Matrix");
const surroundedRegion = require("./graph/traversingProblem/8_surroundedRegions");
const numEnclaves = require("./graph/traversingProblem/9_numberOfEnclaves");
const isBipartite = require("./graph/traversingProblem/13_bipartiteGraph");
const cycleDetectionInDirectedGraph = require("./graph/traversingProblem/14_cycleDetectionInDirectedGraph");
const numberOfDistinctIslands = require("./graph/traversingProblem/12_numberOfDistinctIslands");
const topologicalSort = require("./graph/topoSort/1_topoSort");
const kahnAlgorithm = require("./graph/topoSort/2_kahnAlgorithm");
const courseSchedule = require("./graph/topoSort/4_courseSchedule");
const courseSchedule2 = require("./graph/topoSort/5_courseSchedule2");
const alienDictionary = require("./graph/topoSort/7_alienDictionary");
const shortestPathInDAG = require("./graph/shortestPathAlgo/2_shortestPathInDAG");
const shortestPathInUndirected = require("./graph/shortestPathAlgo/1_shortestPathInUndirected");
const djisktraAlgorithm = require("./graph/shortestPathAlgo/3_djisktraAlgorithm");
const shortestPathBinaryMatrix = require("./graph/shortestPathAlgo/4_shortestPathBinaryMatrix");
const minimumEffortPath = require("./graph/shortestPathAlgo/5_pathWithMinimumEffort");
const findCheapestPrice = require("./graph/shortestPathAlgo/6_cheapestFlightsWithinKStops");
const networkDelayTime = require("./graph/shortestPathAlgo/7_networkDelayTime");
const countPaths = require("./graph/shortestPathAlgo/8_numberOfWaysToArriveAtDestination");
const minimumMultiplicationsToReachEnd = require("./graph/shortestPathAlgo/9_minimumMultiplicationsToReachEnd");
const findTheCity = require("./graph/shortestPathAlgo/12_findCityWithSmallestNumberOfNeighborsAtThresholdDistance");
const floydWarshall = require("./graph/shortestPathAlgo/11_floydWarshalAlgorithm");
const primsAlgorithm = require("./graph/MSTandDisjointSet/1_primsAlgorithm");
const disjointSet = require("./graph/MSTandDisjointSet/2_disjointSet");
const kruskalsAlgorithm = require("./graph/MSTandDisjointSet/3_kruskalsAlgorithm");
const makeConnected = require("./graph/MSTandDisjointSet/4_numberOfOperationsToMakeNetworkConnected");
const removeStones = require("./graph/MSTandDisjointSet/5_mostStonesRemovedWithSameRowsOrColumns");
const accountsMerge = require("./graph/MSTandDisjointSet/6_accountsMerge");
const numOfIslands2 = require("./graph/MSTandDisjointSet/7_numOfIslands2");
const largestIsland = require("./graph/MSTandDisjointSet/8_makingALargeIsland");

largestIsland.run();


